[200~---
name: Debian Mainline
on:
  schedule:
    - cron: "11 23 * * *"
  workflow_dispatch:
jobs:
  version:
    name: Fetch NGINX mainline version
    runs-on: ubuntu-22.04
    outputs:
      major: ${{ steps.nginx_version.outputs.major }}
      minor: ${{ steps.nginx_version.outputs.minor }}
      patch: ${{ steps.nginx_version.outputs.patch }}
      distro: ${{ steps.distro_version.outputs.release }}
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Parse NGINX mainline version
        id: nginx_version
        run: |
          echo "major=$(cat update.sh | grep -m1 '\[mainline\]=' | cut -d"'" -f2 | cut -d"." -f1)" >> "$GITHUB_OUTPUT"
          echo "minor=$(cat update.sh | grep -m1 '\[mainline\]=' | cut -d"'" -f2 | cut -d"." -f2)" >> "$GITHUB_OUTPUT"
          echo "patch=$(cat update.sh | grep -m1 '\[mainline\]=' | cut -d"'" -f2 | cut -d"." -f3)" >> "$GITHUB_OUTPUT"

      - name: Parse Debian version
        id: distro_version
        run: |
          echo "release=$(cat update.sh | grep -m4 '\[mainline\]=' | tail -n1 | cut -d"'" -f2)" >> "$GITHUB_OUTPUT"

  core:
    name: Build Debian NGINX mainline Docker image
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    needs: version
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install soci-snapshotter
        run: |
          wget https://github.com/awslabs/soci-snapshotter/releases/download/v0.3.0/soci-snapshotter-0.3.0-linux-amd64.tar.gz
          sudo tar -C /usr/local/bin -xvf soci-snapshotter-0.3.0-linux-amd64.tar.gz soci soci-snapshotter-grpc

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/bateleurX/nginx-unprivileged
          tags: |
            type=raw,value=${{ needs.version.outputs.major }}.${{ needs.version.outputs.minor }}.${{ needs.version.outputs.patch }}
            type=raw,value=${{ needs.version.outputs.major }}.${{ needs.version.outputs.minor }}.${{ needs.version.outputs.patch }}-${{ needs.version.outputs.distro }}
            type=raw,value=${{ needs.version.outputs.major }}.${{ needs.version.outputs.minor }}
            type=raw,value=${{ needs.version.outputs.major }}.${{ needs.version.outputs.minor }}-${{ needs.version.outputs.distro }}
            type=raw,value=${{ needs.version.outputs.major }}
            type=raw,value=${{ needs.version.outputs.major }}-${{ needs.version.outputs.distro }}
            type=raw,value=mainline
            type=raw,value=mainline-${{ needs.version.outputs.distro }}
            type=raw,value=latest
            type=raw,value=${{ needs.version.outputs.distro }}

      - name: Build and push NGINX mainline Debian image to Amazon ECR, Docker Hub, and GitHub Container Registry
        id: build
        uses: docker/build-push-action@v4
        with:
          #platforms: linux/amd64, linux/arm/v5, linux/arm/v7, linux/arm64, linux/386, linux/mips64le, linux/ppc64le, linux/s390x
          platforms: linux/amd64,linux/arm64
          context: "{{ defaultContext }}:mainline/debian"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha,scope=debian-perl
          cache-to: type=gha,mode=min,scope=debian-perl

      - name: Generate SOCI index
        run: |
          sudo soci create  ${{ steps.meta.outputs.tags }}
